{"version":3,"sources":["API/API.js","context/PaginationContext.js","sections/Pagination.js","sections/Sorting.js","utils/RadioBox.js","utils/CheckBox.js","sections/FilteringAge.js","sections/Filtering.js","sections/Patient.js","App.js","index.js"],"names":["host","location","origin","getPatientList","length","page","order_column","order_desc","filters","gender","race","ethnicity","age_min","age_max","death","descBoolean","axios","get","then","res","data","catch","e","console","log","getPatientBrief","personID","PaginationContext","createContext","PaginationProvider","children","useEffect","callListAPI","useState","setPage","setLength","setOrder_column","setOrder_desc","totalLength","setTotalLength","newLength","setNewLength","shownPagination","setShownPagination","setFilters","genders","setGenders","races","setRaces","ethnicities","setEthnicities","a","makeFilterArray","arr","resultArr","map","item","index","push","Promise","all","toggledPatient","setToggledPatient","Provider","value","Pagination","callGetPatientListAPI","useContext","className","onSubmit","preventDefault","target","parseInt","type","onChange","Math","min","replace","style","margin","lastPage","ceil","onClick","i","cursor","backgroundColor","color","borderRadius","pagination","Sorting","columnArr","sortColumn","column","desc","RadioBox","category","list","handleFilters","id","name","htmlFor","key","CheckBox","checked","setChecked","handleToggle","currentIndex","indexOf","newChecked","splice","FilteringAge","Filtering","paramFilters","Patient","toggle","conditionList","setConditionList","visitCount","setVisitCount","isOpened","setIsOpened","callPatientBriefAPI","useCallback","display","colSpan","App","isOpenedSorting","setIsOpenedSorting","isOpenedFiltering","setIsOpenedFiltering","patientList","setPatientList","response","patients","patient","Fragment","includes","document","getElementById","toggleDisplay","age","dayjs","birthDatetime","format","isDeath","ReactDOM","render"],"mappings":"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","file":"static/js/main.d9fd4ad1.chunk.js","sourcesContent":["/* eslint no-restricted-globals: [\"off\"] */\r\nimport axios from 'axios';\r\n\r\nconst host = process.env.NODE_ENV === 'development' ?\r\n    process.env.REACT_APP_HOST :\r\n    location.origin;\r\n\r\nexport const getPatientList = (\r\n    length,\r\n    page,\r\n    order_column,\r\n    order_desc,\r\n    filters\r\n) => {\r\n    const {\r\n        gender,\r\n        race,\r\n        ethnicity,\r\n        age_min,\r\n        age_max,\r\n        death\r\n    } = filters;\r\n    const descBoolean = order_desc === true ? -1 : 1;\r\n\r\n    return axios.get(`${host}/patient?length=${length}&page=${page - 1}${order_column ? '&order_column=' + order_column : ''}${order_desc ? '&order_desc=' + descBoolean : ''}${gender ? '&gender=' + gender : ''}${race.length !== 0 ? '&race=' + race : ''}${ethnicity ? '&ethnicity=' + ethnicity : ''}${age_min ? '&age_min=' + age_min : ''}${age_max ? '&age_max=' + age_max : ''}${death ? '&death=' + death : ''}`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getPatientBrief = personID => {\r\n    return axios.get(`${host}/patient/${personID}`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getPatientCondition = personID => {\r\n    return axios.get(`${host}/patient/${personID}/condition`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getPatientDrug = personID => {\r\n    return axios.get(`${host}/patient/${personID}/drug`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getPatientVisit = personID => {\r\n    return axios.get(`${host}/patient/${personID}/visit`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getStat = () => {\r\n    return axios.get(`${host}/stat`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getGenderList = () => {\r\n    return axios.get(`${host}/list/gender`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getRaceList = () => {\r\n    return axios.get(`${host}/list/race`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}\r\n\r\nexport const getEthnicityList = () => {\r\n    return axios.get(`${host}/list/ethnicity`)\r\n        .then(res => res.data)\r\n        .catch(e => console.log(e));\r\n}","import React, { createContext, useState, useEffect } from 'react';\r\nimport { getGenderList, getRaceList, getEthnicityList } from '../API/API';\r\n\r\nexport const PaginationContext = createContext();\r\n\r\nexport const PaginationProvider = ({ children }) => {\r\n    useEffect(() => {\r\n        callListAPI();\r\n    }, []);\r\n\r\n    // Pagination\r\n    const [page, setPage] = useState(1);\r\n    const [length, setLength] = useState(10);\r\n    const [order_column, setOrder_column] = useState(null);\r\n    const [order_desc, setOrder_desc] = useState(null);\r\n\r\n    const [totalLength, setTotalLength] = useState(null);\r\n    const [newLength, setNewLength] = useState(10);\r\n    const [shownPagination, setShownPagination] = useState(0);\r\n    const [filters, setFilters] = useState({\r\n        gender: \"\",\r\n        race: [],\r\n        ethnicity: \"\",\r\n        age_min: \"\",\r\n        age_max: \"\",\r\n        death: \"\"\r\n    });\r\n\r\n    // filtering\r\n    const [genders, setGenders] = useState(null);\r\n    const [races, setRaces] = useState(null);\r\n    const [ethnicities, setEthnicities] = useState(null);\r\n\r\n    const callListAPI = async () => {\r\n        const makeFilterArray = arr => {\r\n            let resultArr = [];\r\n            arr.map((item, index) => (\r\n                resultArr.push({\r\n                    \"key\": index + 1,\r\n                    \"value\": item\r\n                })\r\n            ));\r\n            return resultArr;\r\n        }\r\n\r\n        await Promise.all([\r\n            getGenderList()\r\n                .then(res => makeFilterArray(res))\r\n                .then(res => setGenders(res)),\r\n            getRaceList()\r\n                .then(res => makeFilterArray(res))\r\n                .then(res => setRaces(res)),\r\n            getEthnicityList()\r\n                .then(res => makeFilterArray(res))\r\n                .then(res => setEthnicities(res))\r\n        ]);\r\n    }\r\n\r\n    // Toggle\r\n    const [toggledPatient, setToggledPatient] = useState([]);\r\n\r\n    return <PaginationContext.Provider\r\n        value={{\r\n            page,\r\n            setPage,\r\n            length,\r\n            setLength,\r\n            order_column,\r\n            setOrder_column,\r\n            order_desc,\r\n            setOrder_desc,\r\n            totalLength,\r\n            setTotalLength,\r\n            newLength,\r\n            setNewLength,\r\n            shownPagination,\r\n            setShownPagination,\r\n            filters,\r\n            setFilters,\r\n            genders,\r\n            races,\r\n            ethnicities,\r\n            toggledPatient,\r\n            setToggledPatient\r\n        }}\r\n    >\r\n        {children}\r\n    </PaginationContext.Provider>\r\n}","import React, { useContext } from 'react';\r\nimport { PaginationContext } from '../context/PaginationContext';\r\n\r\nconst Pagination = ({ callGetPatientListAPI }) => {\r\n    const {\r\n        page,\r\n        length,\r\n        setLength,\r\n        order_column,\r\n        order_desc,\r\n        totalLength,\r\n        newLength,\r\n        setNewLength,\r\n        shownPagination,\r\n        setShownPagination,\r\n        filters,\r\n        setToggledPatient\r\n    } = useContext(PaginationContext);\r\n\r\n    const changeLength = e => {\r\n        e.preventDefault();\r\n        let value = e.target[0].value;\r\n\r\n        if (!value || value === '0') value = length;\r\n        else value = parseInt(value);\r\n\r\n        setLength(value);\r\n        callGetPatientListAPI(value, 1, order_column, order_desc, filters);\r\n        setShownPagination(0);\r\n        setToggledPatient([]);\r\n    }\r\n\r\n    const validatNumber = e => setNewLength(Math.min(e.target.value.replace(/[^0-9]/g, ''), totalLength));\r\n\r\n    const pagination = () => {\r\n        let arr = [];\r\n        const lastPage = Math.ceil(totalLength / length);\r\n\r\n        shownPagination !== 0 && arr.push(\r\n            <li\r\n                key='prev'\r\n                onClick={() => {\r\n                    setShownPagination(shownPagination - 10);\r\n                    callGetPatientListAPI(length, shownPagination - 9, order_column, order_desc, filters);\r\n                    setToggledPatient([]);\r\n                }}\r\n            >\r\n                〈\r\n            </li>\r\n        )\r\n\r\n        for (let i = shownPagination; i < Math.min(shownPagination + 10, lastPage); i++) {\r\n            arr.push(\r\n                <li\r\n                    key={i + 1}\r\n                    onClick={() => {\r\n                        if (page === i + 1) return;\r\n                        callGetPatientListAPI(length, i + 1, order_column, order_desc, filters);\r\n                        setToggledPatient([]);\r\n                    }}\r\n                    style={{\r\n                        // color: i + 1 === page ? 'blue' : null,\r\n                        // textDecoration: i + 1 === page ? 'underline' : null,\r\n                        cursor: i + 1 === page ? 'inherit' : 'pointer',\r\n                        backgroundColor: i + 1 === page ? 'black' : 'inherit',\r\n                        color: i + 1 === page ? 'white' : 'black',\r\n                        borderRadius: i + 1 === page ? '2rem' : 'none'\r\n                    }}\r\n                >\r\n                    {i + 1}\r\n                </li>\r\n            );\r\n        }\r\n\r\n        shownPagination + 10 < lastPage && arr.push(\r\n            <li\r\n                key='next'\r\n                onClick={() => {\r\n                    setShownPagination(shownPagination + 10);\r\n                    callGetPatientListAPI(length, shownPagination + 11, order_column, order_desc, filters);\r\n                    setToggledPatient([]);\r\n                }}\r\n            >\r\n                〉\r\n            </li>\r\n        )\r\n\r\n        return arr;\r\n    };\r\n\r\n    return (\r\n        <div className='pagination'>\r\n            <form onSubmit={changeLength}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={validatNumber}\r\n                    value={newLength}\r\n                />\r\n                <span style={{ margin: '0px 10px' }}> / {totalLength}</span>\r\n                <button type='submit'>변경</button>\r\n            </form>\r\n            <ul>\r\n                {pagination()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, { useContext } from 'react';\r\nimport { PaginationContext } from '../context/PaginationContext';\r\n\r\nconst Sorting = ({ callGetPatientListAPI, columnArr }) => {\r\n    const {\r\n        setOrder_column,\r\n        setOrder_desc,\r\n        setShownPagination,\r\n        filters,\r\n        length,\r\n        order_column,\r\n        order_desc,\r\n        setToggledPatient\r\n    } = useContext(PaginationContext);\r\n\r\n    const sortColumn = (column, desc) => {\r\n        setOrder_column(column);\r\n        setOrder_desc(desc);\r\n        callGetPatientListAPI(length, 1, column, desc, filters);\r\n        setShownPagination(0);\r\n        setToggledPatient([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                columnArr.map(column => (\r\n                    <th key={column}>\r\n                        <span onClick={() => sortColumn(column, true)}>\r\n                            {\r\n                                order_column === column && order_desc === true ?\r\n                                    '▼' : '▽'\r\n                            }\r\n                        </span>\r\n                        <span onClick={() => sortColumn(column, false)}>\r\n                            {\r\n                                order_column === column && order_desc === false ?\r\n                                    '▲' : '△'\r\n                            }\r\n                        </span>\r\n                    </th>\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sorting;","import React from 'react';\r\n\r\nconst RadioBox = ({ category, list, handleFilters }) => {\r\n    const renderRadioboxLists = () => list && list.map(item => (\r\n        <div key={item.key}>\r\n            <input\r\n                type=\"radio\"\r\n                value={item.value}\r\n                id={item.value}\r\n                name={category}\r\n            />\r\n            <label htmlFor={item.value}>\r\n                {item.value}\r\n            </label>\r\n        </div>\r\n    ));\r\n\r\n    const handleChange = e => handleFilters(e.target.value, category);\r\n\r\n    return (\r\n        <form onChange={handleChange}>\r\n            {renderRadioboxLists()}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RadioBox;","import React, { useState } from 'react';\r\n\r\nconst CheckBox = ({ category, list, handleFilters }) => {\r\n    const [checked, setChecked] = useState([]);\r\n\r\n    const renderCheckboxLists = () => list && list.map(item => (\r\n        <div key={item.key}>\r\n            <input\r\n                type=\"checkbox\"\r\n                value={item.value}\r\n                id={item.value}\r\n                onChange={() => handleToggle(item.value)}\r\n            />\r\n            <label htmlFor={item.value}>\r\n                {item.value}\r\n            </label>\r\n        </div>\r\n    ));\r\n\r\n    const handleToggle = value => {\r\n        const currentIndex = checked.indexOf(value)\r\n        const newChecked = [...checked]\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value)\r\n        } else {\r\n            newChecked.splice(currentIndex, 1)\r\n        }\r\n        setChecked(newChecked)\r\n        handleFilters(newChecked, category);\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            {renderCheckboxLists()}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CheckBox;","import React, { useContext } from 'react';\r\nimport { PaginationContext } from '../context/PaginationContext';\r\n\r\nconst FilteringAge = () => {\r\n    const { filters, setFilters } = useContext(PaginationContext);\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        const age_min = parseInt(e.target[0].value);\r\n        const age_max = parseInt(e.target[1].value);\r\n\r\n        setFilters({\r\n            ...filters,\r\n            age_min,\r\n            age_max\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler} className='age-filter'>\r\n            <div>\r\n                <label htmlFor='min-age'>min</label>\r\n                <input type=\"text\" id='min-age' />\r\n            </div>\r\n            <div>\r\n                <label htmlFor='max-age'>max</label>\r\n                <input type=\"text\" id='max-age' />\r\n            </div>\r\n            <button>검색</button>\r\n        </form >\r\n    )\r\n}\r\n\r\nexport default FilteringAge;\r\n","import React, { useContext } from 'react';\r\nimport RadioBox from '../utils/RadioBox';\r\nimport CheckBox from '../utils/CheckBox';\r\nimport FilteringAge from './FilteringAge';\r\nimport { PaginationContext } from '../context/PaginationContext';\r\n\r\nconst Filtering = () => {\r\n    const {\r\n        filters,\r\n        setFilters,\r\n        genders,\r\n        races,\r\n        ethnicities\r\n    } = useContext(PaginationContext);\r\n\r\n    const handleFilters = (paramFilters, category) => {\r\n        setFilters({\r\n            ...filters,\r\n            [category]: paramFilters\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <th>\r\n                <FilteringAge />\r\n            </th>\r\n            <th></th>\r\n            <th>\r\n                <RadioBox\r\n                    category=\"gender\"\r\n                    list={genders}\r\n                    handleFilters={handleFilters}\r\n                />\r\n            </th>\r\n            <th>\r\n                <RadioBox\r\n                    category=\"ethnicity\"\r\n                    list={ethnicities}\r\n                    handleFilters={handleFilters}\r\n                />\r\n            </th>\r\n            <th>\r\n                <CheckBox\r\n                    category=\"race\"\r\n                    list={races}\r\n                    handleFilters={handleFilters}\r\n                />\r\n            </th>\r\n            <th>\r\n                <RadioBox\r\n                    category=\"death\"\r\n                    list={[\r\n                        {\r\n                            \"key\": 1,\r\n                            \"value\": \"Y\"\r\n                        },\r\n                        {\r\n                            \"key\": 2,\r\n                            \"value\": \"N\"\r\n                        }\r\n                    ]}\r\n                    handleFilters={handleFilters}\r\n                />\r\n            </th>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filtering;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { getPatientBrief } from '../API/API';\r\n\r\nconst Patient = ({ personID, toggle }) => {\r\n    const [conditionList, setConditionList] = useState(null);\r\n    const [visitCount, setVisitCount] = useState(null);\r\n    const [isOpened, setIsOpened] = useState(false);\r\n\r\n    const callPatientBriefAPI = useCallback(async () => {\r\n        await getPatientBrief(personID)\r\n            .then(res => {\r\n                setConditionList(res.conditionList);\r\n                setVisitCount(res.visitCount)\r\n            });\r\n    }, [personID]);\r\n\r\n    useEffect(() => {\r\n        if (toggle && !isOpened) setIsOpened(true)\r\n        if (toggle && isOpened) callPatientBriefAPI();\r\n    }, [callPatientBriefAPI, isOpened, toggle]);\r\n\r\n    return (\r\n        <tr id={personID} style={{ display: 'none' }}>\r\n            <td colSpan={8} className=\"patient-brief\">\r\n                <p><b>visit count : {visitCount}</b></p>\r\n                {\r\n                    conditionList &&\r\n                    conditionList.map((list, index) => (\r\n                        <p key={index}>{list}</p>\r\n                    ))\r\n                }\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Patient;","import React, { useEffect, useState, useContext, useCallback } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport { getPatientList } from './API/API';\r\nimport './App.css';\r\nimport Pagination from './sections/Pagination';\r\n\r\nimport Sorting from './sections/Sorting';\r\nimport Filtering from './sections/Filtering';\r\nimport Patient from './sections/Patient';\r\nimport { PaginationContext } from './context/PaginationContext';\r\n\r\nconst App = () => {\r\n    const {\r\n        setPage,\r\n        length,\r\n        order_column,\r\n        order_desc,\r\n        setTotalLength,\r\n        setShownPagination,\r\n        filters,\r\n        toggledPatient,\r\n        setToggledPatient\r\n    } = useContext(PaginationContext);\r\n    const [isOpenedSorting, setIsOpenedSorting] = useState(false);\r\n    const [isOpenedFiltering, setIsOpenedFiltering] = useState(false)\r\n\r\n    const [patientList, setPatientList] = useState(null);\r\n    const callGetPatientListAPI = useCallback(\r\n        async (length, page, order_column, order_desc, filters) => {\r\n            const response = await getPatientList(length, page, order_column, order_desc, filters);\r\n            response && Promise.all([\r\n                setPatientList(response.patients),\r\n                setTotalLength(response.totalLength),\r\n                setPage(response.page)\r\n            ]);\r\n        }, [setPage, setTotalLength]\r\n    );\r\n\r\n    useEffect(() => {\r\n        callGetPatientListAPI(length, 1, order_column, order_desc, filters);\r\n        setShownPagination(0);\r\n        setToggledPatient([]);\r\n    }, [\r\n        callGetPatientListAPI,\r\n        filters,\r\n        length,\r\n        order_column,\r\n        order_desc,\r\n        setShownPagination,\r\n        setToggledPatient\r\n    ]);\r\n\r\n    // const resetAPI = () => {\r\n    //     const resetFilters = {\r\n    //         gender: \"\",\r\n    //         race: [],\r\n    //         ethnicity: \"\",\r\n    //         age_min: \"\",\r\n    //         age_max: \"\",\r\n    //         death: \"\"\r\n    //     }\r\n    //     callGetPatientListAPI(10, 1, null, true, resetFilters);\r\n    //     setShownPagination(0);\r\n    //     setToggledPatient([]);\r\n    // }\r\n\r\n    const toggleSorting = () => setIsOpenedSorting(!isOpenedSorting);\r\n    const toggleFiltering = () => setIsOpenedFiltering(!isOpenedFiltering);\r\n    const toggleDisplay = personID => {\r\n        const chekced = toggledPatient.includes(personID);\r\n        if (!chekced) setToggledPatient([...toggledPatient, personID]);\r\n\r\n        const isOpened = document.getElementById(personID).style.display;\r\n        if (isOpened === 'none') document.getElementById(personID).style.display = \"table-row\";\r\n        else document.getElementById(personID).style.display = \"none\";\r\n    }\r\n\r\n    const columnArr = [\r\n        'personID',\r\n        'age',\r\n        'birthDatetime',\r\n        'gender',\r\n        'ethnicity',\r\n        'race',\r\n        'isDeath'\r\n    ]\r\n\r\n    return (\r\n        !patientList ? 'Loading...' :\r\n            <div className='table-container'>\r\n                <div className='button-container'>\r\n                    <button onClick={toggleSorting}>정렬</button>\r\n                    <button onClick={toggleFiltering}>필터</button>\r\n                    {/* <button onClick={resetAPI}>초기화</button> */}\r\n                </div>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>No.</th>\r\n                            {columnArr.map(column => <th key={column} className={column}>{column}</th>)}\r\n                        </tr>\r\n\r\n                        {\r\n                            isOpenedSorting &&\r\n                            <tr className='sorting'>\r\n                                <th></th>\r\n                                <Sorting\r\n                                    callGetPatientListAPI={callGetPatientListAPI}\r\n                                    columnArr={columnArr}\r\n                                />\r\n                            </tr>\r\n                        }\r\n\r\n                        {\r\n                            isOpenedFiltering &&\r\n                            <tr className='filtering'>\r\n                                <th></th>\r\n                                <th></th>\r\n                                <Filtering />\r\n                            </tr>\r\n                        }\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {\r\n                            patientList &&\r\n                            patientList.map((patient, index) => (\r\n                                <React.Fragment key={patient.personID}>\r\n                                    <tr onClick={() => toggleDisplay(patient.personID)}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{patient.personID}</td>\r\n                                        <td>{patient.age}</td>\r\n                                        <td>{dayjs(patient.birthDatetime).format(\"YYYY-MM-DD\")}</td>\r\n                                        <td>{patient.gender}</td>\r\n                                        <td>{patient.ethnicity}</td>\r\n                                        <td>{patient.race}</td>\r\n                                        <td>{patient.isDeath ? \"Y\" : \"N\"}</td>\r\n                                    </tr>\r\n                                    <Patient\r\n                                        personID={patient.personID}\r\n                                        toggle={toggledPatient.includes(patient.personID) && true}\r\n                                    />\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n                <Pagination\r\n                    callGetPatientListAPI={callGetPatientListAPI}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { PaginationProvider } from './context/PaginationContext'\r\n\r\nReactDOM.render(\r\n  <PaginationProvider>\r\n    <App />\r\n  </PaginationProvider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}